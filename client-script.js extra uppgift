'use strict';
let socket = io();
let userList=[];
window.addEventListener('load',function(){
    const button = document.querySelector('.btn');
    button.addEventListener('click',function(event){
        const inputText = document.getElementById('msg').value;
        try{
            event.preventDefault();
            if(inputText.length<2){
                throw "Texten måste vara minst 2 tecken";
            }else{
                const errorMessage = document.querySelector('.row p');
                if(errorMessage){
                    errorMessage.remove();
                }
                /**
                 * Algoritmer som jag använde för att skicka en privat meddelande 
                 * Jag tänkte det kunde vara bra om man kan skicka en privat meddelande om användaren 
                 * börjar sin meddelande med '@nickName'. När flera klienter är anslutna man måste kolla
                 * alla av dem. Därför loopar här man userList vektor. 
                 * Om startsWith returnerar true, skicka input värde 
                 * OCH 
                 * nickName index till server. 
                 */
                for(let i =0;i<userList.length;i++){
                    if(inputText.startsWith('@'+userList[i])){
                        socket.emit('privateMessage',{
                            "contentId" : document.querySelector('#msg').value,
                            "index":i 
                        })
                    }
                }
                if(!inputText.startsWith('@'))
                    socket.emit('newContent', { "contentId" : document.querySelector('#msg').value } );
                //showMessage();
            }
            document.getElementById('msg').value='';
        }catch(error){
            const div  = document.querySelector('.row');
            console.log('error');
            if(!div.querySelector('p')){
                const errorP = document.createElement('p');
                errorP.setAttribute('style','color:red;');
                const errorMessage = document.createTextNode(error);
                errorP.appendChild(errorMessage);
                div.appendChild(errorP);
            }
        }
    });
});
//function showMessage(){
    socket.on('EveryoneContent', function(data) {

        //skriv ut content
        let flow = document.querySelector('#flow');
    
        let text = document.createElement('p');
        text.setAttribute('style','text-align: left');
        text.innerHTML =data.time + ': <b>' + data.name +'</b>: ' + data.contentId ;
    
        flow.appendChild(text);
    
    });
//}
/**
 * Klient koden hämtar updateUserList event från server och uppdaterar en klientversion 
 * användarelistvektor. Man kan tänka varför man behöver det men i vår det behövs för att skicka en 
 * privat meddelande event till server 
 */
socket.on('updateUserList',function(data){
    userList = data.userList;
});
socket.on('sendPrivateMessage', function(data) {

    //skriv ut content
    let flow = document.querySelector('#flow');

    let text = document.createElement('p');
    text.setAttribute('style','text-align: left');
    text.setAttribute('style','color:pink');
    text.innerHTML =data.time + ': <b>' + data.name +'</b>: ' + data.contentId ;

    flow.appendChild(text);

});
